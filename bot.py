import logging
import asyncio
import pytz
from datetime import datetime, time
from telegram import (
    InlineKeyboardButton, InlineKeyboardMarkup, Update
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    MessageHandler, filters, ContextTypes
)
from telethon.sync import TelegramClient


client = TelegramClient("session_name", API_ID, API_HASH)

# üîπ –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å—Ç–æ–≤ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
user_posts = {}
user_reservations = {}  # {user_id: (post_id, message_id)}
active_users = set()

# pending_payments = {}  # {user_id: message_id –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã}

START_MESSAGE = """
–î–æ—Ä–æ–≥–∏–µ –∫–ª–∏–µ–Ω—Ç—ã, –º—ã —Ä–∞–¥—ã –≤—Å–µ—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–º —á–∞—Ç-–±–æ—Ç–µ! üëÄ

–ö–æ–º–∞–Ω–¥–∞ ¬´–†–µ–∫–ª–∞–º–∞ –≤ —Ç–≥–∫¬ª –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω–Ω–æ–≤–∞—Ü–∏—é –≤ —Å—Ñ–µ—Ä–µ –æ–∫–∞–∑–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —É—Å–ª—É–≥! –¢–µ–ø–µ—Ä—å, —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω—É—é —Ä–µ–∫–ª–∞–º—É –µ—â–µ —É–¥–æ–±–Ω–µ–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ. –ë–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–∞–∑–æ–π–ª–∏–≤—ã—Ö –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤ –∏ –≤–µ—á–Ω–æ–≥–æ —Å–ø–∞–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –≤ –∫–∞–Ω–∞–ª–µ ü§çüôè

–í –Ω–∞—à–µ–º —á–∞—Ç-–±–æ—Ç–µ –≤—Å–µ –ø—Ä–µ–¥–µ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ! 
–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ä–µ–∫–ª–∞–º—ã: 
1. –ù–∞–∂–∏–º–∞–µ—Ç–µ ¬´–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–±–æ—Ä—ã¬ª
2. –í—ã–±–∏—Ä–∞–µ—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –Ω–∞–±–æ—Ä –∏ –Ω–∞–∂–∏–º–∞–µ—Ç–µ ¬´–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ¬ª
3. –û–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –±–æ—Ç—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —á–µ–∫ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª 

–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
- –º—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ø—Ä–∏—Ö–æ–¥ 
- —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–ª–Ω–æ–π –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ 
- –æ–ø–ª–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –æ—Ç–º–µ–Ω—ã —Ä–µ–∫–ª–∞–º—ã 
–ó–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å: @manageraddv
"""

PAYMENTS_MESSAGE = """
–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:
2202208318731503
–ú–∞—Ä–∏—è –ó. –°–±–µ—Ä–±–∞–Ω–∫. 

–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!

–ó–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å: @manageraddv
"""

CLOSE_MESSAGE = """
–ù–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–±–æ—Ä—ã, –Ω–∞–¥–µ–µ–º—Å—è  –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è —Å–µ–±—èü§ç

–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª–æ–≥–µ—Ä–∞, —Ç–æ –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è  - @manageraddv
"""

NOTIFICATIONS = """
–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!ü§ç
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤: {num}
–ó–∞–≥–ª—è–¥—ã–≤–∞–π—Ç–µ –≤ –±–æ—Ç! –£–≤–µ—Ä–µ–Ω—ã, –≤—ã –Ω–∞–π–¥–µ—Ç–µ —á—Ç–æ-—Ç–æ –¥–ª—è —Å–µ–±—è üôè
"""

# üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_evening_reminders(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now(pytz.timezone("Europe/Moscow")).time()
    target_time = time(18, 00)  # 18:00 –ø–æ –ú–æ—Å–∫–≤–µ

    if now.hour == target_time.hour and now.minute == target_time.minute:
        for user_id in active_users:
            if user_id != MANAGER_ID:
                num = await fetch_filtered_posts()
                if len(num):
                    try:
                        keyboard = [[InlineKeyboardButton("üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–±–æ—Ä—ã", callback_data="view_sets")]]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await context.bot.send_message(user_id, NOTIFICATIONS.format(num=len(num)), reply_markup=reply_markup)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# async def send_evening_reminders(context: ContextTypes.DEFAULT_TYPE):
#     num_posts = await fetch_filtered_posts()
#     if num_posts:
#         for user_id in context.bot_data.get("active_users", set()):
#             if user_id != MANAGER_ID:
#                 try:
#                     keyboard = [[InlineKeyboardButton("üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–±–æ—Ä—ã", callback_data="view_sets")]]
#                     reply_markup = InlineKeyboardMarkup(keyboard)
#                     await context.bot.send_message(user_id, NOTIFICATIONS.format(num=len(num_posts)), reply_markup=reply_markup)
#                 except Exception as e:
#                     logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# # –ó–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ 18:00 –ø–æ –ú–æ—Å–∫–≤–µ
# def setup_jobs(application: Application):
#     job_queue = application.job_queue
#     job_queue.run_daily(send_evening_reminders, time(hour=18, minute=49, tzinfo=pytz.timezone("Europe/Moscow")))

# üîπ –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def schedule_reminders(application: Application):
    while True:
        await send_evening_reminders(application)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

# üîπ –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id != MANAGER_ID:
        active_users.add(user_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = [[InlineKeyboardButton("üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–±–æ—Ä—ã", callback_data="view_sets")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            START_MESSAGE,
            reply_markup=reply_markup)
    
# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
async def fetch_filtered_posts():
    async with client:
        messages = await client.get_messages(CHANNEL_ID, limit=50)
        return [msg for msg in messages if msg.text and "#–Ω–∞–±–æ—Ä" in msg.text]


# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    await query.answer()

    if data == "view_sets":
        if user_id not in user_posts:
            user_posts[user_id] = await fetch_filtered_posts()

        if user_posts[user_id]:
            post = user_posts[user_id].pop(0)

            sent_message = await context.bot.forward_message(
                chat_id=user_id,
                from_chat_id=CHANNEL_ID,
                message_id=post.id
            )

            keyboard = [
                [InlineKeyboardButton("üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –Ω–∞–±–æ—Ä—ã", callback_data="view_sets")],
                [InlineKeyboardButton("üõí –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ", callback_data=f"reserve_{sent_message.message_id}_{post.id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_message(
                chat_id=user_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                reply_markup=reply_markup,
                reply_to_message_id=sent_message.message_id
            )
            
        else:
            keyboard = [[InlineKeyboardButton("üì¶ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –Ω–∞–±–æ—Ä–æ–≤", callback_data="view_sets")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(CLOSE_MESSAGE, reply_markup=reply_markup)

    elif data.startswith("reserve_"):
        _, msg_id, post_id = data.split("_")
        user_reservations[user_id] = (int(post_id), int(msg_id))

        confirmation_message = await query.message.reply_text(
            PAYMENTS_MESSAGE
        )

        # pending_payments[user_id] = confirmation_message.message_id

    elif data.startswith("confirm_payment_"):
        await manager_confirm_payment(update, context, data)


# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã (—Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç)
async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_id in user_reservations:
        post_id, msg_id = user_reservations[user_id]
        media_message = update.message

        # ‚úÖ –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É
        sent_post = await context.bot.forward_message(
            chat_id=MANAGER_ID,
            from_chat_id=CHANNEL_ID,
            message_id=post_id
        )

        # ‚úÖ –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–ª–∞—Ç–æ–π
        forwarded_payment = await media_message.forward(MANAGER_ID)

        keyboard = [[InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_payment_{user_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirmation_message = await context.bot.send_message(
            chat_id=MANAGER_ID,
            text="üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!",
            reply_markup=reply_markup,
            reply_to_message_id=forwarded_payment.message_id
        )

        new_confirmation = await update.message.reply_text("‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")

    else:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –º–µ—Å—Ç–æ.ü§ç")

# üîπ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
async def manager_confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, data: str):
    query = update.callback_query
    user_id = int(data.split("_")[-1])

    if user_id in user_reservations:
        _, user_message_id = user_reservations[user_id]

        # ‚úÖ –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!"
        if user_message_id:
            try:
                await context.bot.delete_message(chat_id=user_id, message_id=user_message_id)
            except Exception as e:
                print(e)

        keyboard = [[InlineKeyboardButton("üì¶ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞–±–æ—Ä–∞–º", callback_data="view_sets")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!"
        await context.bot.send_message(user_id, "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!", reply_markup=reply_markup)

        keyboard = [[InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_payment_{user_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await query.message.edit_text("‚úÖ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞, –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ!", reply_markup=reply_markup)

        # ‚úÖ –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
        del user_reservations[user_id]

    else:
        await query.answer("–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º")

# üîπ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO | filters.Document.ALL, handle_media))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ–Ω–µ
    loop = asyncio.get_event_loop()
    loop.create_task(schedule_reminders(app))
    # setup_jobs(app)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()